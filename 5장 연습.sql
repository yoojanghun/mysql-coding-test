USE company;
USE	kleague;


-- K02 팀 혹은 K07 팀 선수들을 검색
-- UNION 연산은 WHERE 절의 OR 혹은 IN 연산으로 표현 가능
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02'
UNION
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K07'
ORDER	BY	선수명;


-- 소속이 K01 팀 선수들 혹은 포지션이 골키퍼(GK)인 선수들을 모두 검색(중복 포함)
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K01'
UNION	ALL
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	POSITION = 'GK'
ORDER	BY 팀코드, 선수명;


-- 소속이 K01 팀 선수들 혹은 포지션이 골키퍼(GK)인 선수들을 모두 검색(중복 제거)
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K01'
UNION
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	POSITION = 'GK'
ORDER	BY 팀코드, 선수명;


-- 선수들의 포지션별 평균키와 팀별 평균키를 검색하라
SELECT	'P' 구분코드, POSITION 포지션, AVG(HEIGHT) 평균키
FROM	PLAYER
GROUP	BY POSITION
UNION
SELECT	'T' 구분코드, TEAM_ID 팀아이디, AVG(HEIGHT) 평균키
FROM	PLAYER
GROUP	BY TEAM_ID
ORDER	BY 1;
-- 위에서 TEAM_ID와 POSITION의 데이터 타입은 호환 가능하다


-- 소속이 K02 팀이면서 포지션이 GK인 선수들을 검색
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02'
INTERSECT
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	POSITION = 'GK'
ORDER	BY 1,2,3,4,5;


-- 아래는 모두 같은 INTERSECT 연산임
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02' AND POSITION = 'GK'
ORDER	BY 1,2,3,4,5;

SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02' AND
		PLAYER_ID IN (
						SELECT	PLAYER_ID
                        FROM	PLAYER
                        WHERE	POSITION = 'GK')
ORDER	BY 1,2,3,4,5;

SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER X
WHERE	X.TEAM_ID = 'K02' AND	
		EXISTS (
					SELECT	1
                    FROM	PLAYER Y
                    WHERE	Y.PLAYER_ID = X.PLAYER_ID AND
							Y.POSITION = 'GK')
ORDER	BY 1,2,3,4,5;


-- 소속이 K02 팀이면서 포지션이 MF가 아닌 선수들을 검색
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02'
EXCEPT
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	POSITION = 'MF'
ORDER	BY 1,2,3,4,5;


-- 아래는 모두 같은 EXCEPT 표현
SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02' AND POSITION <> 'MF'
ORDER	BY 1,2,3,4,5;

SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER
WHERE	TEAM_ID = 'K02' AND
		PLAYER_ID NOT IN (
							SELECT	PLAYER_ID
                            FROM	PLAYER
                            WHERE	POSITION = 'MF')
ORDER	BY 1,2,3,4,5;

SELECT	TEAM_ID 팀코드, PLAYER_NAME 선수명, POSITION 포지션, BACK_NO 백넘버, HEIGHT 키
FROM	PLAYER X
WHERE	X.TEAM_ID = 'K02' AND
		NOT EXISTS (
						SELECT	1
                        FROM	PLAYER Y
                        WHERE	Y.PLAYER_ID = X.PLAYER_ID AND
								Y.POSITION = 'MF')
ORDER	BY 1,2,3,4,5;


-- 선수들의 이름, 백넘버, 소속 팀명 및 팀 연고지를 검색
SELECT	P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, T.TEAM_NAME 팀명, T.REGION_NAME 연고지
FROM	PLAYER P JOIN TEAM T USING(TEAM_ID);

SELECT	P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, T.TEAM_NAME 팀명, T.REGION_NAME 연고지
FROM	PLAYER P, TEAM T
WHERE	P.TEAM_ID = T.TEAM_ID;


-- 포지션이 ‘GK’인 선수들의 이름, 백넘버, 소속 팀명 및 팀 연고지를 검색하라. 단, 백넘버의 오름차순으로 출력하라.
SELECT	P.PLAYER_NAME 선수명, P.BACK_NO 백넘버, T.TEAM_NAME 팀명, T.REGION_NAME 연고지
FROM	PLAYER P JOIN TEAM T USING(TEAM_ID)
WHERE	P.POSITION = 'GK'
ORDER	BY P.BACK_NO;